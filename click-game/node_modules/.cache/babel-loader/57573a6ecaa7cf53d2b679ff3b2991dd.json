{"ast":null,"code":"import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Nav from \"./components/Nav\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      friends,\n      score: 0,\n      topScore: 0\n    };\n\n    this.handleCorrectGuess = newData => {\n      const {\n        topScore,\n        score\n      } = this.state;\n      const newScore = score + 1;\n      const newTopScore = Math.max(newScore, topScore);\n      this.setState({\n        friends: this.shuffleData(newData),\n        score: newScore,\n        topSCore: newTopScore\n      });\n    };\n\n    this.resetData = friends => {\n      const resetData = friends.map(item => ({ ...item,\n        clicked: false\n      }));\n      return this.shuffleData(resetData);\n    };\n\n    this.clickHandler = event => {\n      this.setState({\n        message: \"Click on an image to begin!\"\n      });\n      let char = event.target.id;\n\n      if (this.state.friends.includes(char)) {\n        this.setState({\n          charClicked: [],\n          score: 0,\n          message: \"Doh! You already picked that character, Try again.\"\n        });\n      } else {\n        let charClicked = this.state.charClicked;\n        charClicked.push(char);\n        this.setState({\n          charClicked: charClicked\n        });\n        console.log(this.state.charClicked);\n        this.incrementScore();\n      }\n\n      ;\n\n      if (this.state.score === this.state.images.length) {\n        this.setState({\n          message: \"Cowabunga Dude!! You guess correctly.\"\n        });\n      }\n\n      ;\n      this.shuffleChar();\n    };\n\n    this.shuffleData = friends => {\n      let i = friends.length - 1;\n\n      while (i > 0) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = friends[i];\n        friends[i] = friends[j];\n        friends[j] = temp;\n        i--;\n      }\n\n      return friends;\n    };\n\n    this.handleItemClick = id => {\n      let guessedCorrectly = false;\n      const newData = this.state.friends.map(item => {\n        const newItem = { ...item\n        };\n\n        if (newItem.id === id) {\n          if (!newItem.clicked) {\n            newItem.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n\n        return newItem;\n      });\n      guessedCorrectly ? this.handleCorrectGuess(newData) : this.handelIncorrectguess(newData);\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      friends: this.shuffleData(this.state.friends)\n    });\n  } // Map over this.state.friends and render a FriendCard component for each friend object\n\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/chase/click-game/src/App.js"],"names":["React","Component","Card","Nav","Title","friends","App","state","score","topScore","handleCorrectGuess","newData","newScore","newTopScore","Math","max","setState","shuffleData","topSCore","resetData","map","item","clicked","clickHandler","event","message","char","target","id","includes","charClicked","push","console","log","incrementScore","images","length","shuffleChar","i","j","floor","random","temp","handleItemClick","guessedCorrectly","newItem","handelIncorrectguess","componentDidMount"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Nav from \"./components/Nav\"\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\n\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    score: 0,\n    topScore: 0\n  };\n  \n\n  componentDidMount() {\n    this.setState({ friends: this.shuffleData(this.state.friends) });\n  }\n\n  handleCorrectGuess = newData => {\n    const { topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore);\n\n    this.setState({\n      friends: this.shuffleData(newData),\n      score: newScore,\n      topSCore: newTopScore\n    });\n  };\n\n  resetData = friends => {\n    const resetData = friends.map(item => ({ ...item, clicked: false }));\n    return this.shuffleData(resetData);\n  };\n\n  clickHandler = (event) => {\n    this.setState({ message: \"Click on an image to begin!\" })\n    let char = event.target.id;\n    if (this.state.friends.includes(char)) {\n      this.setState({ charClicked: [], score: 0, message: \"Doh! You already picked that character, Try again.\" });\n    } else {\n      let charClicked = this.state.charClicked;\n      charClicked.push(char);\n      this.setState({ charClicked: charClicked })\n      console.log(this.state.charClicked);\n      this.incrementScore();\n    };\n    if (this.state.score === this.state.images.length) {\n      this.setState({ message: \"Cowabunga Dude!! You guess correctly.\" });\n    };\n    this.shuffleChar();\n  }\n\n  shuffleData = friends => {\n    let i = friends.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = friends[i];\n      friends[i] = friends[j];\n      friends[j] = temp;\n      i--;\n      \n    }\n \n    return friends;\n\n  };\n\n  handleItemClick = id => {\n    let guessedCorrectly = false;\n    const newData = this.state.friends.map(item => {\n      const newItem = { ...item };\n      if (newItem.id === id) {\n        if (!newItem.clicked) {\n          newItem.clicked = true;\n          guessedCorrectly = true;\n       \n        }\n      }\n      return newItem;\n    });\n    guessedCorrectly\n      ? this.handleCorrectGuess(newData)\n      : this.handelIncorrectguess(newData);\n  };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}