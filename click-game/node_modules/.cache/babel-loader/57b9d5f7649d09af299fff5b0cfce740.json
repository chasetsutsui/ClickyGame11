{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chase\\\\click-game\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Nav from \"./components/Nav\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      friends,\n      score: 0,\n      topScore: 0\n    };\n\n    this.handleCorrectGuess = newData => {\n      const {\n        topScore,\n        score\n      } = this.state;\n      const newScore = score + 1;\n      const newTopScore = Math.max(newScore, topScore);\n      this.setState({\n        friends: this.shuffleData(newData),\n        score: newScore,\n        topSCore: newTopScore\n      });\n    };\n\n    this.resetData = friends => {\n      const resetData = friends.map(item => ({ ...item,\n        clicked: false\n      }));\n      return this.shuffleData(resetData);\n    };\n\n    this.clickHandler = event => {\n      this.setState({\n        message: \"Click on an image to begin!\"\n      });\n      let friend = event.target.id;\n\n      if (this.state.friends.includes(friend)) {\n        this.setState({\n          friends: [],\n          score: 0,\n          message: \"Try again.\"\n        });\n      } else {\n        let friendClicked = this.state.friendClicked;\n        friendClicked.push(friend);\n        this.setState({\n          charClicked: friendClicked\n        });\n        console.log(this.state.friendClicked);\n        this.incrementScore();\n      }\n\n      ;\n\n      if (this.state.score === this.state.images.length) {\n        this.setState({\n          message: \"Cowabunga Dude!! You guess correctly.\"\n        });\n      }\n\n      ;\n      this.shuffleChar();\n    };\n\n    this.shuffleData = friends => {\n      let i = friends.length - 1;\n\n      while (i > 0) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = friends[i];\n        friends[i] = friends[j];\n        friends[j] = temp;\n        i--;\n      }\n\n      return friends;\n    };\n\n    this.handleItemClick = id => {\n      let guessedCorrectly = false;\n      const newData = this.state.friends.map(item => {\n        const newItem = { ...item\n        };\n\n        if (newItem.id === id) {\n          if (!newItem.clicked) {\n            newItem.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n\n        return newItem;\n      });\n      guessedCorrectly ? this.handleCorrectGuess(newData) : this.handelIncorrectguess(newData);\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      friends: this.shuffleData(this.state.friends)\n    });\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      message: this.state.message,\n      score: this.state.score,\n      topScore: this.state.topScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"col-sm-10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.state.friends.map(char => {\n      return React.createElement(Card, {\n        key: char.id,\n        id: char.id,\n        classname: \"img img-thumbnail\",\n        src: require(char.image + \".jpg\"),\n        alt: char.name,\n        onClick: this.clickHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      });\n    })), React.createElement(\"div\", {\n      className: \"col-sm-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/chase/click-game/src/App.js"],"names":["React","Component","Card","Nav","Title","friends","App","state","score","topScore","handleCorrectGuess","newData","newScore","newTopScore","Math","max","setState","shuffleData","topSCore","resetData","map","item","clicked","clickHandler","event","message","friend","target","id","includes","friendClicked","push","charClicked","console","log","incrementScore","images","length","shuffleChar","i","j","floor","random","temp","handleItemClick","guessedCorrectly","newItem","handelIncorrectguess","componentDidMount","render","char","require","image","name"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Nav from \"./components/Nav\"\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\n\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    score: 0,\n    topScore: 0\n  };\n  \n\n  componentDidMount() {\n    this.setState({ friends: this.shuffleData(this.state.friends) });\n  }\n\n  handleCorrectGuess = newData => {\n    const { topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore);\n\n    this.setState({\n      friends: this.shuffleData(newData),\n      score: newScore,\n      topSCore: newTopScore\n    });\n  };\n\n  resetData = friends => {\n    const resetData = friends.map(item => ({ ...item, clicked: false }));\n    return this.shuffleData(resetData);\n  };\n\n  clickHandler = (event) => {\n    this.setState({ message: \"Click on an image to begin!\" })\n    let friend = event.target.id;\n    if (this.state.friends.includes(friend)) {\n      this.setState({ friends: [], score: 0, message: \"Try again.\" });\n    } else {\n      let friendClicked = this.state.friendClicked;\n      friendClicked.push(friend);\n      this.setState({ charClicked: friendClicked })\n      console.log(this.state.friendClicked);\n      this.incrementScore();\n    };\n    if (this.state.score === this.state.images.length) {\n      this.setState({ message: \"Cowabunga Dude!! You guess correctly.\" });\n    };\n    this.shuffleChar();\n  }\n\n  shuffleData = friends => {\n    let i = friends.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = friends[i];\n      friends[i] = friends[j];\n      friends[j] = temp;\n      i--;\n      \n    }\n \n    return friends;\n\n  };\n\n  handleItemClick = id => {\n    let guessedCorrectly = false;\n    const newData = this.state.friends.map(item => {\n      const newItem = { ...item };\n      if (newItem.id === id) {\n        if (!newItem.clicked) {\n          newItem.clicked = true;\n          guessedCorrectly = true;\n       \n        }\n      }\n      return newItem;\n    });\n    guessedCorrectly\n      ? this.handleCorrectGuess(newData)\n      : this.handelIncorrectguess(newData);\n  };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (<div className=\"App\">\n      <Nav\n        message={this.state.message}\n        score={this.state.score}\n        topScore={this.state.topScore}\n      />\n      <Title /><div className=\"row\">\n        <div className=\"col-sm-1\"></div>\n        <div className=\"col-sm-10\">{\n          this.state.friends.map(char => {\n            return <Card key={char.id} id={char.id} classname={\"img img-thumbnail\"} src={require(char.image + \".jpg\")} alt={char.name} onClick={this.clickHandler} />\n          })\n        }\n        </div>\n        <div className=\"col-sm-1\"></div>\n      </div>\n    </div>\n    );\n  };\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}