{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chase\\\\click-game\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      friends,\n      score: 0,\n      topScore: 0\n    };\n\n    this.handleCorrectGuess = newData => {\n      const {\n        topScore,\n        score\n      } = this.state;\n      const newScore = score + 1;\n      const newTopScore = Math.max(newScore, topScore);\n      this.setState({\n        friends: this.shuffleData(newData),\n        score: newScore,\n        topSCore: newTopScore\n      });\n    };\n\n    this.handleIncorrectguess = friends => {\n      this.setState({\n        friends: this.resetData(friends),\n        score: 0\n      });\n    };\n\n    this.resetData = friends => {\n      const resetData = friends.map(item => ({ ...item,\n        clicked: false\n      }));\n      return this.shuffleData(resetData);\n    };\n\n    this.shuffleData = friends => {\n      let i = friends.length - 1;\n\n      while (i > 0) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = friends[i];\n        friends[i] = friends[j];\n        friends[j] = temp;\n        i--;\n      }\n\n      return friends;\n    };\n\n    this.handleItemClick = id => {\n      let guessedCorrectly = false;\n      const newData = this.state.friends.map(item => {\n        const newItem = { ...item\n        };\n\n        if (newItem.id === id) {\n          if (!newItem.clicked) {\n            newItem.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n\n        return newItem;\n      });\n      guessedCorrectly ? this.handleCorrectGuess(newData) : this.handleIncorrectguess(newData);\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      friends: this.shuffleData(this.state.friends)\n    });\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Title, {\n      score: this.state.score,\n      topSCore: this.state.tope,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"clicky game\"), this.state.friends.map(friend => React.createElement(Card, {\n      id: friend.id,\n      key: friend.id,\n      name: friend.name,\n      image: friend.image,\n      handleClick: this.handleItemClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/chase/click-game/src/App.js"],"names":["React","Component","Card","Wrapper","Title","friends","App","state","score","topScore","handleCorrectGuess","newData","newScore","newTopScore","Math","max","setState","shuffleData","topSCore","handleIncorrectguess","resetData","map","item","clicked","i","length","j","floor","random","temp","handleItemClick","id","guessedCorrectly","newItem","componentDidMount","render","tope","friend","name","image"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAIA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BM,KAF0B,GAElB;AACNF,MAAAA,OADM;AAENG,MAAAA,KAAK,EAAE,CAFD;AAGNC,MAAAA,QAAQ,EAAE;AAHJ,KAFkB;;AAAA,SAa1BC,kBAb0B,GAaLC,OAAO,IAAI;AAC9B,YAAM;AAAEF,QAAAA,QAAF;AAAYD,QAAAA;AAAZ,UAAsB,KAAKD,KAAjC;AACA,YAAMK,QAAQ,GAAGJ,KAAK,GAAG,CAAzB;AACA,YAAMK,WAAW,GAAGC,IAAI,CAACC,GAAL,CAASH,QAAT,EAAmBH,QAAnB,CAApB;AAEA,WAAKO,QAAL,CAAc;AACZX,QAAAA,OAAO,EAAE,KAAKY,WAAL,CAAiBN,OAAjB,CADG;AAEZH,QAAAA,KAAK,EAAEI,QAFK;AAGZM,QAAAA,QAAQ,EAAEL;AAHE,OAAd;AAKD,KAvByB;;AAAA,SAyB1BM,oBAzB0B,GAyBHd,OAAO,IAAI;AAChC,WAAKW,QAAL,CAAc;AACZX,QAAAA,OAAO,EAAE,KAAKe,SAAL,CAAef,OAAf,CADG;AAEZG,QAAAA,KAAK,EAAE;AAFK,OAAd;AAID,KA9ByB;;AAAA,SAgC1BY,SAhC0B,GAgCdf,OAAO,IAAI;AACrB,YAAMe,SAAS,GAAGf,OAAO,CAACgB,GAAR,CAAYC,IAAI,KAAK,EAAE,GAAGA,IAAL;AAAWC,QAAAA,OAAO,EAAE;AAApB,OAAL,CAAhB,CAAlB;AACA,aAAO,KAAKN,WAAL,CAAiBG,SAAjB,CAAP;AACD,KAnCyB;;AAAA,SAqC1BH,WArC0B,GAqCZZ,OAAO,IAAI;AACvB,UAAImB,CAAC,GAAGnB,OAAO,CAACoB,MAAR,GAAiB,CAAzB;;AACA,aAAOD,CAAC,GAAG,CAAX,EAAc;AACZ,cAAME,CAAC,GAAGZ,IAAI,CAACa,KAAL,CAAWb,IAAI,CAACc,MAAL,MAAiBJ,CAAC,GAAG,CAArB,CAAX,CAAV;AACA,cAAMK,IAAI,GAAGxB,OAAO,CAACmB,CAAD,CAApB;AACAnB,QAAAA,OAAO,CAACmB,CAAD,CAAP,GAAanB,OAAO,CAACqB,CAAD,CAApB;AACArB,QAAAA,OAAO,CAACqB,CAAD,CAAP,GAAaG,IAAb;AACAL,QAAAA,CAAC;AAEF;;AAED,aAAOnB,OAAP;AAED,KAlDyB;;AAAA,SAoD1ByB,eApD0B,GAoDRC,EAAE,IAAI;AACtB,UAAIC,gBAAgB,GAAG,KAAvB;AACA,YAAMrB,OAAO,GAAG,KAAKJ,KAAL,CAAWF,OAAX,CAAmBgB,GAAnB,CAAuBC,IAAI,IAAI;AAC7C,cAAMW,OAAO,GAAG,EAAE,GAAGX;AAAL,SAAhB;;AACA,YAAIW,OAAO,CAACF,EAAR,KAAeA,EAAnB,EAAuB;AACrB,cAAI,CAACE,OAAO,CAACV,OAAb,EAAsB;AACpBU,YAAAA,OAAO,CAACV,OAAR,GAAkB,IAAlB;AACAS,YAAAA,gBAAgB,GAAG,IAAnB;AAED;AACF;;AACD,eAAOC,OAAP;AACD,OAVe,CAAhB;AAWAD,MAAAA,gBAAgB,GACZ,KAAKtB,kBAAL,CAAwBC,OAAxB,CADY,GAEZ,KAAKQ,oBAAL,CAA0BR,OAA1B,CAFJ;AAGD,KApEyB;AAAA;;AAS1BuB,EAAAA,iBAAiB,GAAG;AAClB,SAAKlB,QAAL,CAAc;AAAEX,MAAAA,OAAO,EAAE,KAAKY,WAAL,CAAiB,KAAKV,KAAL,CAAWF,OAA5B;AAAX,KAAd;AACD;;AA2DD;AACA8B,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,KAAK5B,KAAL,CAAWC,KAAzB;AAAgC,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAW6B,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEG,KAAK7B,KAAL,CAAWF,OAAX,CAAmBgB,GAAnB,CAAuBgB,MAAM,IAC5B,oBAAC,IAAD;AACE,MAAA,EAAE,EAAEA,MAAM,CAACN,EADb;AAEE,MAAA,GAAG,EAAEM,MAAM,CAACN,EAFd;AAGE,MAAA,IAAI,EAAEM,MAAM,CAACC,IAHf;AAIE,MAAA,KAAK,EAAED,MAAM,CAACE,KAJhB;AAKE,MAAA,WAAW,EAAE,KAAKT,eALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CAFH,CADF;AAcD;;AAtFyB;;AAyF5B,eAAexB,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\n\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    score: 0,\n    topScore: 0\n  };\n  \n\n  componentDidMount() {\n    this.setState({ friends: this.shuffleData(this.state.friends) });\n  }\n\n  handleCorrectGuess = newData => {\n    const { topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore);\n\n    this.setState({\n      friends: this.shuffleData(newData),\n      score: newScore,\n      topSCore: newTopScore\n    });\n  };\n\n  handleIncorrectguess = friends => {\n    this.setState({\n      friends: this.resetData(friends),\n      score: 0\n    });\n  }\n\n  resetData = friends => {\n    const resetData = friends.map(item => ({ ...item, clicked: false }));\n    return this.shuffleData(resetData);\n  };\n\n  shuffleData = friends => {\n    let i = friends.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = friends[i];\n      friends[i] = friends[j];\n      friends[j] = temp;\n      i--;\n      \n    }\n \n    return friends;\n\n  };\n\n  handleItemClick = id => {\n    let guessedCorrectly = false;\n    const newData = this.state.friends.map(item => {\n      const newItem = { ...item };\n      if (newItem.id === id) {\n        if (!newItem.clicked) {\n          newItem.clicked = true;\n          guessedCorrectly = true;\n       \n        }\n      }\n      return newItem;\n    });\n    guessedCorrectly\n      ? this.handleCorrectGuess(newData)\n      : this.handleIncorrectguess(newData);\n  };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Title score={this.state.score} topSCore={this.state.tope}>clicky game</Title>\n        {this.state.friends.map(friend => (\n          <Card\n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n            handleClick={this.handleItemClick}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}